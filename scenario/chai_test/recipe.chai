def create_recipe(uri)
{
    var v = cook.recipe(uri)
    return v
}

{
    var v = create_recipe("test")
    var v3 = create_recipe("test22")
    var v2 = v

    v.set_config_callback(Hook.Post, fun(r)
    { 
        print("Post called") 
        r.each_file(fun(f) {
            print("${f.key}: ${f.flags}")
        })
    })

    v.set_config_callback(Hook.Pre, fun(){ 
        print("Pre called") 
    })
    v.set_config_callback(Hook.Selected, fun(r){ 
        print("Recipe ${r.uri} has been selected") 
    })

    v3.set_config_callback(Hook.Selected, fun(r) {
        assert(false, "Delibarate fail")
    })

    v.add("src", "**.*")

    v.name = "testje"
    assert_equal(v.name, "testje")

    {
        v.set_type(TargetType.Executable)
        if (my(OS) == OS.Windows) {
            assert_equal(v.primary_target_filename, "testje.ext");
        } else {
            assert_equal(v.primary_target_filename, "testje");
        }
    }

    {
        v.set_type(TargetType.SharedLibrary)
        if (my(OS) == OS.Windows) {
            assert_equal(v.primary_target_filename, "testje.dll");
        } else {
            assert_equal(v.primary_target_filename, "libtestje.so");
        }
    }
    
    {
        v.set_type(TargetType.Archive)
        if (my(OS) == OS.Windows) {
            assert_equal(v.primary_target_filename, "testje.lib");
        } else {
            assert_equal(v.primary_target_filename, "libtestje.a");
        }
    }
    {
        v.set_type(TargetType.Undefined)
        assert_equal(v.primary_target_filename, "");
    }
}
