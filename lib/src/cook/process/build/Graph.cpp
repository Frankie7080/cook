#include "cook/process/build/Graph.hpp"
#include "boost/graph/topological_sort.hpp"

namespace cook { namespace process { namespace build {

Graph::vertex_descriptor Graph::goc_vertex(const FileLabel & path)
{
    auto it = file_map_.find(path);
    if (it != file_map_.end())
        return it->second;

    auto v = boost::add_vertex(Label(path), g_);
    file_map_.insert(std::make_pair(path, v));

    return v;
}

Graph::vertex_descriptor Graph::add_vertex(CommandLabel ptr)
{
    return boost::add_vertex(Label(ptr), g_);
}

Result Graph::add_edge(vertex_descriptor consumer, vertex_descriptor producer, EdgeType type)
{
    MSS_BEGIN(Result);

    const Label & consumer_label = g_[consumer];
    const Label & producer_label = g_[producer];

    MSS(consumer_label.index() !=  producer_label.index());

    if (std::holds_alternative<FileLabel>(producer_label))
    {
        auto p = boost::in_edges(producer, g_);
        MSG_MSS(p.first == p.second, InternalError, "file " << std::get<FileLabel>(producer_label) << " is already generated by another command");
    }

    MSS(boost::add_edge(consumer, producer, type, g_).second);

    MSS_END();

}

const Graph::Label & Graph::operator[](vertex_descriptor vd) const
{
    return g_[vd];
}

Result Graph::topological_commands(std::vector<vertex_descriptor> & commands) const
{
    MSS_BEGIN(Result);
    std::vector<vertex_descriptor> top_order(num_vertices());
    L(C(top_order.size()));

    try
    {
        boost::topological_sort(g_, top_order.begin());
    }
    catch(boost::not_a_dag)
    {
        MSG_MSS(false, InternalError, "The execution graph is not acyclic");
    }

    commands.clear();
    for(vertex_descriptor vd : top_order)
    {
        const Label & l = g_[vd];
        auto visitor = [&](auto && arg)
        {
            using T = std::decay_t<decltype(arg)>;
            if (std::is_same<T, CommandLabel>::value)
                commands.push_back(vd);
        };
        std::visit(visitor, l);
    }

    MSS_END();
}

} } }


