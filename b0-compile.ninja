gubg_include_paths  = -I gubg.algo/src -I gubg.io/src -I gubg.math/src -I gubg.std/src -I gubg.chaiscript/src
cook_lib_include_paths  = -I lib/src $gubg_include_paths
cook_app_include_paths  = -I app/src
chai_include_paths  = -I gubg.chaiscript/extern/ChaiScript/include
catch_include_paths = -I gubg.std/extern/catch/single_include

#[output](script:
#$gubg_mods=%w[std io algo math].map{|str|"gubg.#{str}"}
#$gubg_fns=$gubg_mods.map{|mod|FileList.new("#{mod}/src/gubg/**/*.cpp").to_a}.flatten
#$gubg_test_fns=$gubg_mods.map{|mod|FileList.new("#{mod}/test/src/gubg/**/*_tests.cpp").to_a}.flatten
#$cook_fns=FileList.new("lib/src/**/*.cpp").to_a
#$cook_test_fns=FileList.new("lib/test/**/*_tests.cpp").to_a
#$cook_app_fns=FileList.new("app/**/*.cpp").to_a
#){
#}

#[output](script:
#$gubg_fns.each do |fn|
#  output.puts("build .b0/#{fn}.obj: compile #{fn}")
#  output.puts("    include_paths = $gubg_include_paths")
#end
#){
build .b0/gubg.std/src/gubg/platform/spawn.cpp.obj: compile gubg.std/src/gubg/platform/spawn.cpp
    include_paths = $gubg_include_paths
build .b0/gubg.io/src/gubg/OptionParser.cpp.obj: compile gubg.io/src/gubg/OptionParser.cpp
    include_paths = $gubg_include_paths
build .b0/gubg.io/src/gubg/Strange.cpp.obj: compile gubg.io/src/gubg/Strange.cpp
    include_paths = $gubg_include_paths
build .b0/gubg.io/src/gubg/bitmagic/bitmagic.cpp.obj: compile gubg.io/src/gubg/bitmagic/bitmagic.cpp
    include_paths = $gubg_include_paths
build .b0/gubg.io/src/gubg/file/Descriptor.cpp.obj: compile gubg.io/src/gubg/file/Descriptor.cpp
    include_paths = $gubg_include_paths
build .b0/gubg.io/src/gubg/file/File.cpp.obj: compile gubg.io/src/gubg/file/File.cpp
    include_paths = $gubg_include_paths
build .b0/gubg.io/src/gubg/file/Filesystem.cpp.obj: compile gubg.io/src/gubg/file/Filesystem.cpp
    include_paths = $gubg_include_paths
build .b0/gubg.io/src/gubg/file/Forest.cpp.obj: compile gubg.io/src/gubg/file/Forest.cpp
    include_paths = $gubg_include_paths
build .b0/gubg.io/src/gubg/hash/MD5.cpp.obj: compile gubg.io/src/gubg/hash/MD5.cpp
    include_paths = $gubg_include_paths
build .b0/gubg.io/src/gubg/parse/basic.cpp.obj: compile gubg.io/src/gubg/parse/basic.cpp
    include_paths = $gubg_include_paths
build .b0/gubg.io/src/gubg/parse/xml/Coding.cpp.obj: compile gubg.io/src/gubg/parse/xml/Coding.cpp
    include_paths = $gubg_include_paths
#}
    
#[output](script:
#$cook_fns.each do |fn|
#  output.puts("build .b0/#{fn}.obj: compile #{fn}")
#  output.puts("    include_paths = $cook_lib_include_paths $chai_include_paths")
#end
#){
build .b0/lib/src/cook/Kitchen.cpp.obj: compile lib/src/cook/Kitchen.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/agents/DependentPropagation.cpp.obj: compile lib/src/cook/agents/DependentPropagation.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/agents/IncludePath.cpp.obj: compile lib/src/cook/agents/IncludePath.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/agents/LibraryPath.cpp.obj: compile lib/src/cook/agents/LibraryPath.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/agents/LinkOrder.cpp.obj: compile lib/src/cook/agents/LinkOrder.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/algo/DependencyResolver.cpp.obj: compile lib/src/cook/algo/DependencyResolver.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/chai/Book.cpp.obj: compile lib/src/cook/chai/Book.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/chai/Kitchen.cpp.obj: compile lib/src/cook/chai/Kitchen.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/chai/Logger.cpp.obj: compile lib/src/cook/chai/Logger.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/chai/Recipe.cpp.obj: compile lib/src/cook/chai/Recipe.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/model/Book.cpp.obj: compile lib/src/cook/model/Book.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/model/Recipe.cpp.obj: compile lib/src/cook/model/Recipe.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/model/Snapshot.cpp.obj: compile lib/src/cook/model/Snapshot.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/model/Uri.cpp.obj: compile lib/src/cook/model/Uri.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/rules/CXX.cpp.obj: compile lib/src/cook/rules/CXX.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/rules/Resolver.cpp.obj: compile lib/src/cook/rules/Resolver.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
build .b0/lib/src/cook/rules/RuleSet.cpp.obj: compile lib/src/cook/rules/RuleSet.cpp
    include_paths = $cook_lib_include_paths $chai_include_paths
#}

build .b0/gubg.std/src/catch_runner.cpp.obj: compile gubg.std/src/catch_runner.cpp
    include_paths = $catch_include_paths
#[output](script:
#$gubg_test_fns.each do |fn|
#  output.puts("build .b0/#{fn}.obj: compile #{fn}")
#  output.puts("    include_paths = $gubg_include_paths $catch_include_paths")
#end
#){
build .b0/gubg.std/test/src/gubg/OnlyOnce_tests.cpp.obj: compile gubg.std/test/src/gubg/OnlyOnce_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/Range_tests.cpp.obj: compile gubg.std/test/src/gubg/Range_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/Transition_tests.cpp.obj: compile gubg.std/test/src/gubg/Transition_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/array/Pool_tests.cpp.obj: compile gubg.std/test/src/gubg/array/Pool_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/macro/variadic_tests.cpp.obj: compile gubg.std/test/src/gubg/macro/variadic_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/mss_tests.cpp.obj: compile gubg.std/test/src/gubg/mss_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/pattern/SignalSlot_tests.cpp.obj: compile gubg.std/test/src/gubg/pattern/SignalSlot_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/thread/Semaphore_tests.cpp.obj: compile gubg.std/test/src/gubg/thread/Semaphore_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/tmp/Equal_tests.cpp.obj: compile gubg.std/test/src/gubg/tmp/Equal_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/tmp/FindBaseByName_tests.cpp.obj: compile gubg.std/test/src/gubg/tmp/FindBaseByName_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/tmp/HasTypedef_tests.cpp.obj: compile gubg.std/test/src/gubg/tmp/HasTypedef_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/tmp/If_tests.cpp.obj: compile gubg.std/test/src/gubg/tmp/If_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/tmp/Inheritance_tests.cpp.obj: compile gubg.std/test/src/gubg/tmp/Inheritance_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/tmp/IntType_tests.cpp.obj: compile gubg.std/test/src/gubg/tmp/IntType_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/tmp/SFINAE_tests.cpp.obj: compile gubg.std/test/src/gubg/tmp/SFINAE_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/tmp/TypeList_tests.cpp.obj: compile gubg.std/test/src/gubg/tmp/TypeList_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/tuple/ForEach_tests.cpp.obj: compile gubg.std/test/src/gubg/tuple/ForEach_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.std/test/src/gubg/tuple/TypeTransform_tests.cpp.obj: compile gubg.std/test/src/gubg/tuple/TypeTransform_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/Integer_tests.cpp.obj: compile gubg.io/test/src/gubg/Integer_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/Strange_tests.cpp.obj: compile gubg.io/test/src/gubg/Strange_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/bitmagic/bitmagic_tests.cpp.obj: compile gubg.io/test/src/gubg/bitmagic/bitmagic_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/file/Creater_tests.cpp.obj: compile gubg.io/test/src/gubg/file/Creater_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/file/File_tests.cpp.obj: compile gubg.io/test/src/gubg/file/File_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/file/Filesystem_tests.cpp.obj: compile gubg.io/test/src/gubg/file/Filesystem_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/file/Forest_tests.cpp.obj: compile gubg.io/test/src/gubg/file/Forest_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/hash/MD5_tests.cpp.obj: compile gubg.io/test/src/gubg/hash/MD5_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/naft/Document_tests.cpp.obj: compile gubg.io/test/src/gubg/naft/Document_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/parse/naft/Parser_tests.cpp.obj: compile gubg.io/test/src/gubg/parse/naft/Parser_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/parse/xml/Coding_tests.cpp.obj: compile gubg.io/test/src/gubg/parse/xml/Coding_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/parse/xml/Parser_tests.cpp.obj: compile gubg.io/test/src/gubg/parse/xml/Parser_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/svg/Turtle_tests.cpp.obj: compile gubg.io/test/src/gubg/svg/Turtle_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/xml/Builder_tests.cpp.obj: compile gubg.io/test/src/gubg/xml/Builder_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.io/test/src/gubg/xml/SVG_tests.cpp.obj: compile gubg.io/test/src/gubg/xml/SVG_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.algo/test/src/gubg/gp/World_tests.cpp.obj: compile gubg.algo/test/src/gubg/gp/World_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.algo/test/src/gubg/network/DAG_tests.cpp.obj: compile gubg.algo/test/src/gubg/network/DAG_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.algo/test/src/gubg/optimization/SCG_tests.cpp.obj: compile gubg.algo/test/src/gubg/optimization/SCG_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.algo/test/src/gubg/pid/Controller_tests.cpp.obj: compile gubg.algo/test/src/gubg/pid/Controller_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.algo/test/src/gubg/planning/Planning_tests.cpp.obj: compile gubg.algo/test/src/gubg/planning/Planning_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.algo/test/src/gubg/planning/Task_tests.cpp.obj: compile gubg.algo/test/src/gubg/planning/Task_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.math/test/src/gubg/Matrix_tests.cpp.obj: compile gubg.math/test/src/gubg/Matrix_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.math/test/src/gubg/RunningSum_tests.cpp.obj: compile gubg.math/test/src/gubg/RunningSum_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.math/test/src/gubg/decay/Average_tests.cpp.obj: compile gubg.math/test/src/gubg/decay/Average_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
build .b0/gubg.math/test/src/gubg/decay/Sum_tests.cpp.obj: compile gubg.math/test/src/gubg/decay/Sum_tests.cpp
    include_paths = $gubg_include_paths $catch_include_paths
#}
#[output](script:
#$cook_test_fns.each do |fn|
#  output.puts("build .b0/#{fn}.obj: compile #{fn}")
#  output.puts("    include_paths = $cook_lib_include_paths $catch_include_paths")
#end
#){
build .b0/lib/test/src/cook/LanguageTypePair_tests.cpp.obj: compile lib/test/src/cook/LanguageTypePair_tests.cpp
    include_paths = $cook_lib_include_paths $catch_include_paths
build .b0/lib/test/src/cook/Result_tests.cpp.obj: compile lib/test/src/cook/Result_tests.cpp
    include_paths = $cook_lib_include_paths $catch_include_paths
build .b0/lib/test/src/cook/algo/DependencyResolver_tests.cpp.obj: compile lib/test/src/cook/algo/DependencyResolver_tests.cpp
    include_paths = $cook_lib_include_paths $catch_include_paths
build .b0/lib/test/src/cook/model/Uri_tests.cpp.obj: compile lib/test/src/cook/model/Uri_tests.cpp
    include_paths = $cook_lib_include_paths $catch_include_paths
build .b0/lib/test/src/cook/property/Collection_tests.cpp.obj: compile lib/test/src/cook/property/Collection_tests.cpp
    include_paths = $cook_lib_include_paths $catch_include_paths
build .b0/lib/test/src/cook/rules/CXX_tests.cpp.obj: compile lib/test/src/cook/rules/CXX_tests.cpp
    include_paths = $cook_lib_include_paths $catch_include_paths
build .b0/lib/test/src/cook/rules/Resolve_tests.cpp.obj: compile lib/test/src/cook/rules/Resolve_tests.cpp
    include_paths = $cook_lib_include_paths $catch_include_paths
#}

#[output](script:
#$cook_app_fns.each do |fn|
#  output.puts("build .b0/#{fn}.obj: compile #{fn}")
#  output.puts("    include_paths = $cook_app_include_paths $cook_lib_include_paths")
#end
#){
build .b0/app/src/cook/App.cpp.obj: compile app/src/cook/App.cpp
    include_paths = $cook_app_include_paths $cook_lib_include_paths
build .b0/app/src/cook/app/Options.cpp.obj: compile app/src/cook/app/Options.cpp
    include_paths = $cook_app_include_paths $cook_lib_include_paths
build .b0/app/src/main.cpp.obj: compile app/src/main.cpp
    include_paths = $cook_app_include_paths $cook_lib_include_paths
#}

#[output](script:
#output.puts("build libb0-gubg.a: archive $")
#$gubg_fns.each do |fn|
#  output.puts("    .b0/#{fn}.obj $")
#end
#output.puts
#){
build libb0-gubg.a: archive $
    .b0/gubg.std/src/gubg/platform/spawn.cpp.obj $
    .b0/gubg.io/src/gubg/OptionParser.cpp.obj $
    .b0/gubg.io/src/gubg/Strange.cpp.obj $
    .b0/gubg.io/src/gubg/bitmagic/bitmagic.cpp.obj $
    .b0/gubg.io/src/gubg/file/Descriptor.cpp.obj $
    .b0/gubg.io/src/gubg/file/File.cpp.obj $
    .b0/gubg.io/src/gubg/file/Filesystem.cpp.obj $
    .b0/gubg.io/src/gubg/file/Forest.cpp.obj $
    .b0/gubg.io/src/gubg/hash/MD5.cpp.obj $
    .b0/gubg.io/src/gubg/parse/basic.cpp.obj $
    .b0/gubg.io/src/gubg/parse/xml/Coding.cpp.obj $

#}

#[output](script:
#output.puts("build libb0-cook.a: archive $")
#$cook_fns.each do |fn|
#  output.puts("    .b0/#{fn}.obj $")
#end
#output.puts
#){
build libb0-cook.a: archive $
    .b0/lib/src/cook/Kitchen.cpp.obj $
    .b0/lib/src/cook/agents/DependentPropagation.cpp.obj $
    .b0/lib/src/cook/agents/IncludePath.cpp.obj $
    .b0/lib/src/cook/agents/LibraryPath.cpp.obj $
    .b0/lib/src/cook/agents/LinkOrder.cpp.obj $
    .b0/lib/src/cook/algo/DependencyResolver.cpp.obj $
    .b0/lib/src/cook/chai/Book.cpp.obj $
    .b0/lib/src/cook/chai/Kitchen.cpp.obj $
    .b0/lib/src/cook/chai/Logger.cpp.obj $
    .b0/lib/src/cook/chai/Recipe.cpp.obj $
    .b0/lib/src/cook/model/Book.cpp.obj $
    .b0/lib/src/cook/model/Recipe.cpp.obj $
    .b0/lib/src/cook/model/Snapshot.cpp.obj $
    .b0/lib/src/cook/model/Uri.cpp.obj $
    .b0/lib/src/cook/rules/CXX.cpp.obj $
    .b0/lib/src/cook/rules/Resolver.cpp.obj $
    .b0/lib/src/cook/rules/RuleSet.cpp.obj $

#}

#[output](script:
#output.puts("build b0-unit_tests.exe: link .b0/gubg.std/src/catch_runner.cpp.obj $")
#($cook_test_fns+$gubg_test_fns).each do |fn|
#  output.puts("    .b0/#{fn}.obj $")
#end
#output.puts("    | libb0-cook.a libb0-gubg.a")
#){
build b0-unit_tests.exe: link .b0/gubg.std/src/catch_runner.cpp.obj $
    .b0/lib/test/src/cook/LanguageTypePair_tests.cpp.obj $
    .b0/lib/test/src/cook/Result_tests.cpp.obj $
    .b0/lib/test/src/cook/algo/DependencyResolver_tests.cpp.obj $
    .b0/lib/test/src/cook/model/Uri_tests.cpp.obj $
    .b0/lib/test/src/cook/property/Collection_tests.cpp.obj $
    .b0/lib/test/src/cook/rules/CXX_tests.cpp.obj $
    .b0/lib/test/src/cook/rules/Resolve_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/OnlyOnce_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/Range_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/Transition_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/array/Pool_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/macro/variadic_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/mss_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/pattern/SignalSlot_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/thread/Semaphore_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/tmp/Equal_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/tmp/FindBaseByName_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/tmp/HasTypedef_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/tmp/If_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/tmp/Inheritance_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/tmp/IntType_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/tmp/SFINAE_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/tmp/TypeList_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/tuple/ForEach_tests.cpp.obj $
    .b0/gubg.std/test/src/gubg/tuple/TypeTransform_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/Integer_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/Strange_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/bitmagic/bitmagic_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/file/Creater_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/file/File_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/file/Filesystem_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/file/Forest_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/hash/MD5_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/naft/Document_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/parse/naft/Parser_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/parse/xml/Coding_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/parse/xml/Parser_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/svg/Turtle_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/xml/Builder_tests.cpp.obj $
    .b0/gubg.io/test/src/gubg/xml/SVG_tests.cpp.obj $
    .b0/gubg.algo/test/src/gubg/gp/World_tests.cpp.obj $
    .b0/gubg.algo/test/src/gubg/network/DAG_tests.cpp.obj $
    .b0/gubg.algo/test/src/gubg/optimization/SCG_tests.cpp.obj $
    .b0/gubg.algo/test/src/gubg/pid/Controller_tests.cpp.obj $
    .b0/gubg.algo/test/src/gubg/planning/Planning_tests.cpp.obj $
    .b0/gubg.algo/test/src/gubg/planning/Task_tests.cpp.obj $
    .b0/gubg.math/test/src/gubg/Matrix_tests.cpp.obj $
    .b0/gubg.math/test/src/gubg/RunningSum_tests.cpp.obj $
    .b0/gubg.math/test/src/gubg/decay/Average_tests.cpp.obj $
    .b0/gubg.math/test/src/gubg/decay/Sum_tests.cpp.obj $
    | libb0-cook.a libb0-gubg.a
#}
    library_paths =  -L./
    user_libs = -lb0-cook -lb0-gubg

#[output](script:
#output.puts("build b0-cook.exe: link $")
#$cook_app_fns.each do |fn|
#  output.puts("    .b0/#{fn}.obj $")
#end
#output.puts("    | libb0-cook.a libb0-gubg.a")
#){
build b0-cook.exe: link $
    .b0/app/src/cook/App.cpp.obj $
    .b0/app/src/cook/app/Options.cpp.obj $
    .b0/app/src/main.cpp.obj $
    | libb0-cook.a libb0-gubg.a
#}
    library_paths =  -L./
    user_libs = -lb0-cook -lb0-gubg
